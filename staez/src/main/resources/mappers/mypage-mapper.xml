<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 해당 mapper파일의 고유한 별칭 -->
<mapper namespace="mypageMapper">
	<resultMap type="User" id="userResult">
		<result column="user_no" property="userNo" />
		<result column="user_id" property="userId" />
	</resultMap>

	<resultMap type="BoardAttachment" id="boardAttachmentResult">
		<result column="file_no" property="fileNo" />
		<result column="board_no" property="boardNo" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="file_path" property="filePath" />
		<result column="file_level" property="fileLevel" />
	</resultMap>

	<resultMap type="Board" id="boardResult">
		<result column="board_no" property="boardNo" />
		<result column="ref_board_no" property="refBoardNo" />
		<result column="user_no" property="userNo" />
		<result column="board_level" property="boardLevel" />
		<result column="board_code" property="boardCode" />
		<result column="board_write_date" property="boardWriteDate" />
		<result column="board_title" property="boardTitle" />
		<result column="board_content" property="boardContent" />
		<result column="board_count" property="boardCount" />
		<result column="board_status" property="boardStatus" />
		<result column="like_count" property="likeCount" />
		
    	<association property="user" resultMap="userResult" />
    	<collection property="boardAttachment" resultMap="boardAttachmentResult" />
	</resultMap>
	
	<resultMap type="BoardLike" id="boardLikeResult">
		<result column="board_like_no" property="boardLikeNo" />
		<result column="user_no" property="userNo" />
		<result column="board_no" property="boardNo" />
		<result column="status" property="status" />
		<result column="like_date" property="likeDate" />
	</resultMap>
	
	<select id="duplicateCheck" resultType="_int">
		SELECT COUNT(user_no)
		FROM staez_user
		WHERE nickname = #{nickname}
	</select>
	
	<select id="passwordCheck" resultType="_int">
		SELECT COUNT(user_no)
		FROM staez_user
		WHERE nickname = #{inputPwd}
	</select>
	
	
	<update id="updatePassword">
		UPDATE staez_user
		SET user_pwd = #{userPwd}
		WHERE user_id = #{userId}
	</update>

	<update id="updateUserInfo">
		UPDATE staez_user
		SET nickname = #{nickname},
			gender = #{gender},
			birth = #{birth},
			address = #{address},
			email = #{email},
			phone = #{phone},
			genre_like = #{genreLike}
		WHERE user_id = #{userId}
	</update>
	
	<select id="loadProfileImg" resultType="profileImg">
		SELECT file_no AS fileNo, 
			   user_no AS userNo,
			   change_name AS changeName,  
			   file_path AS filePath 
		FROM profile_img
		WHERE user_no = #{userNo};
	</select>
	
	<insert id="insertProfileImg">
		INSERT INTO profile_img
		VALUES (DEFAULT, 
				#{userNo}, 
				#{originName}, 
				#{changeName}, 
				#{filePath}, 
				DEFAULT, 
				DEFAULT)
	</insert>
	
	<update id="updateProfileImg">
		UPDATE profile_img
		SET origin_name = #{originName},
		    change_name = #{changeName},
		    file_path = #{filePath},
		    upload_date = DEFAULT
		WHERE user_no = #{userNo}
		AND status = 'Y'
	</update>
	
	<update id="withdrawalUser">
		UPDATE staez_user 
		SET user_status = 'N',
			withdrawal_date = now()
		WHERE user_no = #{userNo}
		AND user_status = 'Y'
	</update>
	
	<select id="selectMyBoardListCount" resultType="_int">
		SELECT COUNT(board_no) 
		FROM board
		WHERE user_no = #{userNo}
		AND board_code = 2
		AND board_status = 'Y'
	</select>
	
	<select id="selectMyBoardList" resultType="Board">
		SELECT b.board_no AS boardNo, 
			   b.user_no AS userNo, 
			   COUNT(bl.board_no) AS likeCount, 
			   b.board_title AS boardTitle, 
			   b.board_count AS boardCount, 
			   b.board_write_date AS boardWriteDate 
		FROM board b
		LEFT JOIN (SELECT board_no 
				   FROM board_like 
				   WHERE status='Y') bl ON b.board_no = bl.board_no
		WHERE b.user_no = #{userNo}
		AND b.board_code = 2 
		AND b.board_status = 'Y'
		GROUP BY b.board_no, b.board_title, b.board_count, b.board_write_date
		ORDER BY b.board_no DESC	
	</select>

	<select id="selectLikeBoardListCount" resultType="_int">
		SELECT COUNT(board_like_no) 
		FROM board_like
		WHERE user_no = #{userNo}
		AND status = 'Y'
	</select>
	
	<select id="selectLikeBoardList" resultType="com.spring.staez.community.model.dto.BoardListDto">
		SELECT bl.board_like_no AS boardLikeNo,
		       b.board_no AS boardNo,
		       u.user_id AS userId,
		       b.board_title AS boardTitle,
		       b.board_count AS boardCount,
		       b.board_write_date AS boardWriteDate,
		       (SELECT COUNT(*) 
		        FROM board_like bl2 
		        WHERE bl2.board_no = b.board_no 
		        AND bl2.status = 'Y') AS likeCount
		FROM board_like bl
		JOIN board b ON b.board_no = bl.board_no
		JOIN staez_user u ON b.user_no = u.user_no 
		WHERE bl.user_no = #{userNo}
        AND b.board_code = 2 
        AND bl.status = 'Y'
        ORDER BY bl.board_like_no
	</select>

	<select id="selectPaymentsCount" resultType="_int">
		SELECT COUNT(reserve_no)
		FROM reserve
		WHERE user_no = #{userNo}
	</select>
	
	<select id="selectPaymentsList" resultType="com.spring.staez.user.model.dto.PaymentsInfoDto">
		SELECT c.concert_no AS concertNo, 
				c.concert_title AS concertTitle,
			    t.theater_name AS theaterName,
				r.concert_date AS concertDate,
				cs.schedule,
				c.concert_runtime AS concertRuntime,
					
				r.reserve_no AS reserveNo,
				r.reserve_date AS reserveDate,
				s.grade,
				s.price,
		
				r.reserve_row AS reserveRow,
				r.reserve_col AS reserveCol,
				r.reserve_status AS reserveStatus,
				
				ca.file_path AS filePath,
				ca.change_name AS changeName
		FROM reserve r
		JOIN concert c ON r.concert_no = c.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN theater t ON c.theater_no = t.theater_no
		JOIN seat s ON c.concert_no = s.concert_no
		JOIN concert_schedule cs ON c.concert_no = cs.concert_no			
					
		WHERE r.user_no = #{userNo}
		AND r.reserve_row BETWEEN seat_start_row AND seat_end_row 
		AND r.reserve_col BETWEEN seat_start_col AND seat_end_col
		AND r.concert_date = s.concert_date
		AND r.reserve_status IN ('Y', 'U')
		
		ORDER BY r.reserve_no DESC
	</select>

	<select id="selectScrapCount" resultType="_int">
		SELECT COUNT(concert_like_no) 
		FROM concert_like
		WHERE user_no = #{userNo}
		AND status = 'Y'
	</select>
	
	<select id="selectScrapList" resultType="Concert">
		SELECT cl.concert_like_no AS concertLikeNo, 
				       cl.user_no AS userNo,
					   cl.concert_like_date AS concertLikeDate,
				       c.concert_no AS concertNo, 
				       c.concert_title AS concertTitle, 
				       c.concert_members AS concertMembers,
				       c.age_limit AS ageLimit,
				       t.theater_name AS theaterName,
				       ca.change_name AS changeName,
				       ca.file_path AS filePath, 
				       cs_min_max.start_date AS startDate,
				       cs_min_max.end_date AS endDate		       
		FROM concert_like cl
		
		JOIN concert c 
		ON cl.concert_no = c.concert_no
		
		JOIN concert_attachment ca
		ON c.concert_no = ca.concert_no
		
		JOIN theater t 
		ON c.theater_no = t.theater_no
		
		JOIN (SELECT concert_no, 
					 MIN(start_date) AS start_date, 
					 MAX(end_date) AS end_date
			  FROM concert_schedule
			  GROUP BY concert_no) cs_min_max 
		ON cl.concert_no = cs_min_max.concert_no
		
		WHERE cl.user_no = #{userNo}		
		AND cl.status = 'Y'
		AND ca.file_level = 1
		
		ORDER BY cl.concert_like_date DESC
	</select>
	
	<select id="selectReviewCount" resultType="_int">
		SELECT COUNT(DISTINCT concert_no)
	    FROM reserve
	    WHERE user_no = #{userNo}
	    AND reserve_status = 'Y'
	</select>
	
	<select id="selectReviewList" resultType="Concert">
		SELECT r.concert_date AS concertDate, 
			   r.concert_times AS concertTimes,
			   cr.score AS score,
			   cr.review_content AS reviewContent,
			   c.concert_no AS concertNo,
			   c.concert_title AS concertTitle,
			   c.concert_runtime AS concertRuntime,
			   t.theater_name AS theaterName,
			   ca.change_name AS changeName,
			   ca.file_path AS filePath
			
		FROM (SELECT MAX(concert_date) AS concert_date, concert_times, concert_no, user_no
			  FROM reserve
			  WHERE user_no = #{userNo}
			  AND reserve_status = 'Y'
			  GROUP BY concert_times, concert_no, user_no) r
		
		JOIN concert c 
		ON r.concert_no = c.concert_no
		
		JOIN theater t 
		ON c.theater_no = t.theater_no
		
		JOIN concert_attachment ca
		ON c.concert_no = ca.concert_no
		
		LEFT JOIN concert_review cr
		ON r.concert_no = cr.concert_no
		
		ORDER BY r.concert_date DESC, r.concert_times ASC
	</select>
	
	<update id="deleteMyScrapAjax">
		UPDATE concert_like
		SET status = 'N'
		WHERE user_no = #{userNo}
		AND concert_no = #{concertNo}
		AND status = 'Y'
	</update>
	
	<select id="loadOneLineReviewAjax" resultType="Concert">
		SELECT score, 
			   file_path,
			   change_name,
			   concert_title
			   theater_name
			   
		FROM concert_review
		WHERE concert_no = #{concertNo}
		AND user_no = #{userNo}
	</select>
</mapper>

