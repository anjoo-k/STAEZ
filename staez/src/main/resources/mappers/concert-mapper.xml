<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 해당 mapper파일의 고유한 별칭 -->
<mapper namespace="concertMapper">
	<!-- 
		<resultMap type="mybatis-config.xml의 alias값" id="객체명Result 형태">
			<result column="user_no" property="userNo" />
		</resultMap>
	 -->

	<!-- db의 컬럼과 객체의 필드명이 완전히 같다면 resultType사용 가능 -->
	
	<resultMap type="Concert" id="concertResult">
		<result column="concert_no" property="concertNo"/>
		<result column="theater_no" property="theaterNo"/>
		<result column="concert_title" property="concertTitle"/>
		<result column="concert_plot" property="concertPlot"/>
		<result column="concert_runtime" property="concertRuntime"/>
		<result column="concert_members" property="concertMembers"/>
		<result column="concert_production" property="concertProduction"/>
		<result column="age_limit" property="ageLimit"/>
		<result column="update_date" property="updateDate"/>
		<result column="concert_status" property="concertStatus"/>
		<result column="theater_name" property="theaterName"/>
		<result column="start_date" property="startDate"/>
		<result column="end_date" property="endDate"/>
		<result column="origin_name" property="originName"/>
		<result column="change_name" property="changeName"/>
		<result column="file_path" property="filePath"/>
		<result column="category_name" property="categoryName"/>
		<result column="score" property="score"/>
	</resultMap>
		
	<resultMap type="Category" id="categoryResult">
		<result column="category_no" property="categoryNo"/>
		<result column="ref_category_no" property="refCategoryNo"/>
		<result column="category_name" property="categoryName"/>
		<result column="category_level" property="categoryLevel"/>
	</resultMap>
	
	<resultMap type="ConcertAttachment" id="concertAttachmentResult">
		<result column="file_no" property="fileNo"/>
		<result column="concert_no" property="concertNo"/>
		<result column="origin_name" property="originName"/>
		<result column="change_name" property="changeName"/>
		<result column="file_path" property="filePath"/>
		<result column="upload_date" property="uploadDate"/>
		<result column="file_level" property="fileLevel"/>
		<result column="status" property="status"/>
	</resultMap>
	
	<resultMap type="Theater" id="theaterResult">
		<result column="theater_no" property="theaterNo"/>
		<result column="theater_name" property="theaterName"/>
		<result column="theater_row" property="theaterRow"/>
		<result column="theater_col" property="theaterCol"/>
		<result column="address" property="address"/>
		<result column="telno" property="telno"/>
	</resultMap>
	
	<resultMap type="ConcertLike" id="concertLikeResult">
		<result column="concert_like_no" property="concertLikeNo"/>
		<result column="user_no" property="userNo"/>
		<result column="concert_no" property="concertNo"/>
		<result column="concert_like_date" property="updateDate"/>
		<result column="status" property="status"/>
	</resultMap>
	
	<resultMap type="ConcertSchedule" id="concertScheduleResult">
		<result column="schedule_no" property="scheduleNo"/>
		<result column="concert_no" property="concertNo"/>
		<result column="schedule" property="schedule"/>
		<result column="start_date" property="startDate"/>
		<result column="end_date" property="endDate"/>
		<result column="concert_times" property="concertTimes"/>
		<result column="status" property="status"/>
	</resultMap>
	
	<resultMap type="ConcertReview" id="concertReviewResult">
		<result column="review_no" property="reviewNo"/>
		<result column="user_no" property="userNo"/>
		<result column="concert_no" property="concertNo"/>
		<result column="review_content" property="reviewContent"/>
		<result column="score" property="score"/>
		<result column="review_status" property="reviewStatus"/>
		<result column="concert_title" property="concertTitle"/>
		<result column="review_date" property="reviewDate"/>		
		<result column="nickname" property="nickname"/>
		<result column="origin_name" property="originName"/>
		<result column="change_name" property="changeName"/>
		<result column="file_path" property="filePath"/>
	</resultMap>
	
	<resultMap type="Board" id="boardResult">
		<result column="board_no" property="boardNo" />
		<result column="user_no" property="userNo" />
		<result column="nickname" property="nickname" />
		<result column="board_title" property="boardTitle" />
		<result column="genre_like" property="genreLike" />
		<result column="concert_no" property="concertNo" />
		<result column="enroll_date" property="enrollDate" />
		<result column="withdrawal_date" property="withdrawalDate" />
		<result column="user_status" property="userStatus" />
		<result column="board_write_date" property="boardWriteDate" />
		<result column="board_title" property="boardTitle" />
		<result column="board_content" property="boardContent" />
		<result column="concert_no" property="concertNo" />
		<result column="like_count" property="likeCount" />
		<result column="board_status" property="boardStatus" />
		<result column="board_write_date" property="boardWriteDate" />
		<result column="path" property="path" />
	</resultMap>
	
	<resultMap type="Seat" id="SeatResult">
	    <result column="seat_id" property="seatId"/>
	    <result column="concert_no" property="concertNo"/>
	    <result column="grade" property="grade"/>
	    <result column="price" property="price"/>
   </resultMap>

	<select id="selectCate" resultMap="categoryResult" >
 	    SELECT category_no,
 	    	   category_name,
 	    	   category_level
		FROM category
		WHERE category_no = #{categoryNo};
		<!-- LIMIT 1 OFFSET 0; -->
	</select>
	
	<select id="selectCateCon" resultMap="categoryResult" > 
 	    SELECT category_no, category_name
		FROM category
		WHERE ref_category_no = 1;
	</select>

	<select id="selectconList" resultMap="concertResult" >
		SELECT c.concert_no,
		       c.concert_title,
		       t.theater_name,
		       sub.start_date,
		       sub.end_date,
		       ca.change_name,
		       ca.file_path,
			   ct.category_no,
		       ct.category_name
		FROM concert c
		JOIN(SELECT concert_no,
				    count(DISTINCT concert_no) as concertNo,
					min(cs.start_date) as start_date,
					max(cs.end_date) as end_date
			 FROM concert_schedule cs
			 GROUP BY concert_no
			 ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		JOIN theater t ON c.theater_no = t.theater_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_category cc on  c.concert_no = cc.concert_no	
		JOIN category ct ON cc.category_no = ct.category_no
		WHERE c.concert_status = 'Y'
		 AND ca.status = 'Y'
		 AND cc.category_no =  #{categoryNo};
	</select> 
	
	<select id="selectCon" resultMap="concertResult" >
	    SELECT *
		FROM (
		    SELECT c.concert_no,
		           c.concert_title,
		           t.theater_name,
		           cs.start_date,
		           cs.end_date,
		           ca.change_name,
		           ca.file_path,
		           ct.category_no,
		           c.concert_status,
		           c.concert_runtime,
		           c.age_limit,
		           c.concert_production,
		           c.concert_plot
		    FROM concert c
		    JOIN theater t ON c.theater_no = t.theater_no
		    JOIN concert_schedule cs ON c.concert_no = cs.concert_no
		    JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		    JOIN concert_category cc ON c.concert_no = cc.concert_no
		    JOIN category ct ON cc.category_no = ct.category_no
		    WHERE ca.status = 'Y'
			) sub
		WHERE sub.concert_status = 'Y'
		  AND sub.concert_no = #{concertNo}
		ORDER BY sub.start_date
		LIMIT 1 OFFSET 0;
	</select>
		
	
	<select id="selectConDetail" resultMap="concertResult" >
	    SELECT *
		FROM (
		    SELECT c.concert_no,
		           c.concert_title,
		           t.theater_name,
		           cs.start_date,
		           cs.end_date,
		           ca.change_name,
		           ca.file_path,
		           ct.category_no,
		           c.concert_status,
		           c.concert_runtime,
		           c.age_limit,
		           c.concert_production,
		           c.concert_plot,
		           c.concert_members
		    FROM concert c
		    JOIN theater t ON c.theater_no = t.theater_no
		    JOIN concert_schedule cs ON c.concert_no = cs.concert_no
		    JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		    JOIN concert_category cc ON c.concert_no = cc.concert_no
		    JOIN category ct ON cc.category_no = ct.category_no
		    WHERE ca.status = 'Y'
			) sub
		WHERE sub.concert_status = 'Y'
		  AND sub.concert_no = #{concertNo}
		ORDER BY sub.start_date
		LIMIT 1 OFFSET 0;
	</select>
	
	
	<select id="selectComCount" resultType="_int">
		SELECT COUNT(*)
		FROM concert_review
		WHERE concert_no = #{concertNo}
		  AND review_status = 'Y'
	</select>
	
	
	
	
	<select id="selectComDetail" resultMap="concertReviewResult" >
		SELECT concert_no, score
		from concert_review
		where concert_no = #{concertNo}
	</select>
	
	
	
	
	
	
	<select id="selectRevDetail" resultMap="boardResult" >
	    SELECT user_no,
				board_no,
				nickname,
			    concert_no,
				board_write_date,
				board_title,
				board_content
		 FROM board
		 JOIN staez_user USING (user_no)
		 JOIN tag USING (board_no)
		 JOIN concert USING (concert_no)
		WHERE concert_no = #{concertNo}
		  AND board_status = 'Y'
	</select>
	

		
	
	
	<!-- 좋아요 구현 -->
	<!-- 좋아요 갯수 몇개냐? -->
	<select id="selectConLikeCount" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
			WHERE concert_no = #{concertNo}
			  AND status = 'Y'
	</select>
	
	<select id="selectUserConLike" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
           WHERE user_no = #{userNo}
             AND concert_no = #{concertNo}
             AND status = 'Y'
	</select>
	
	<select id="selectUserConLikeAll" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
           WHERE user_no = #{userNo}
             AND concert_no = #{concertNo}
	</select>
	
	
	<insert id="insertConLike">
	        INSERT INTO concert_like (
	            user_no,
	            concert_no
	        ) VALUES (
	            #{userNo},
	            #{concertNo}
	        )
	</insert>
	
	<update id="updateConLike">
        UPDATE concert_like
           SET status = #{status}
         WHERE user_no = #{userNo}
           AND concert_no = #{concertNo}
    </update>
    
    
    
    <!-- 공연메인페이지 정렬 -->
    <select id="popularList" resultMap="concertResult" >
    		SELECT c.concert_no,
		       c.concert_title,
		       cs.start_date,
		       cs.end_date,
		       ca.change_name,
		       ca.file_path,
			   ct.category_no,
		       ct.category_name
		FROM concert c
		LEFT JOIN(SELECT concert_no,
				count(DISTINCT concert_like_no) as countLike,
				min(scs.start_date) as start_date,
				max(scs.end_date) as end_date
			FROM concert_like
			JOIN concert_schedule scs USING (concert_no)
			GROUP BY concert_no
			ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_category cc on c.concert_no = cc.concert_no	
		JOIN category ct ON cc.category_no = ct.category_no
		JOIN concert_schedule cs ON c.concert_no = cs.concert_no
		WHERE c.concert_status = 'Y'
		AND cc.category_no = #{categoryNo}
	    ORDER BY sub.countLike IS NULL ASC, sub.countLike DESC
	</select>
	
	<select id="latestList" resultMap="concertResult" >
		SELECT c.concert_no,
		       c.concert_title,
		       sub.start_date,
		       sub.end_date,
		       ca.change_name,
		       ca.file_path,
			   ct.category_no,
		       ct.category_name
		FROM concert c
		LEFT JOIN(SELECT concert_no,
				count(DISTINCT concert_like_no) as countLike,
				min(cs.start_date) as start_date,
				max(cs.end_date) as end_date
			FROM concert_like
			JOIN concert_schedule cs USING (concert_no)
			GROUP BY concert_no
			ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_category cc on c.concert_no = cc.concert_no	
		JOIN category ct ON cc.category_no = ct.category_no
		WHERE c.concert_status = 'Y'
		 AND cc.category_no = #{categoryNo}
	    ORDER BY sub.start_date desc
	 </select>
	 
	 <!-- 콘서트 no 중복값있으니까 중복값은 그 중 하나만 보여주도록 프론트에서 처리할 필요 있음 -->
	 <select id="highscoreList" resultMap="concertResult" >
	 	SELECT DISTINCT c.concert_no,
		       c.concert_title,
		       sub.start_date,
		       sub.end_date,
			   cr.score,
		       ca.change_name,
		       ca.file_path,
			   ct.category_no,
		       ct.category_name
		FROM concert c
		JOIN(SELECT concert_no,
				    count(DISTINCT concert_no) as concertNo,
					min(cs.start_date) as start_date,
					max(cs.end_date) as end_date
			 FROM concert_schedule cs
			 GROUP BY concert_no
			 ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		LEFT JOIN (SELECT DISTINCT concert_no, round(avg(score)) as score
				   FROM concert_review
				   GROUP BY concert_no) cr ON c.concert_no = cr.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_category cc ON c.concert_no = cc.concert_no	
		JOIN category ct ON cc.category_no = ct.category_no
		WHERE c.concert_status = 'Y'
		AND cc.category_no = 8
		ORDER BY score DESC NULLS LAST
	 </select>
	 
	  <select id="locationAllList" resultMap="concertResult" >
	 	SELECT c.concert_no,
		       c.concert_title,
		       ca.change_name,
			   sub.start_date,
		       sub.end_date,
		       ca.file_path,
		       ct.category_name,
			   t.address
		FROM concert c
		JOIN theater t USING (theater_no)
		JOIN(SELECT concert_no,
				    count(DISTINCT concert_no) as concertNo,
					min(cs.start_date) as start_date,
					max(cs.end_date) as end_date
			 FROM concert_schedule cs
			 GROUP BY concert_no
			 ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_category cc on c.concert_no = cc.concert_no	
		JOIN category ct ON cc.category_no = ct.category_no
		WHERE c.concert_status = 'Y'
		  AND cc.category_no = #{categoryNo}
	 	  <if test="area != null and area != ''">
 		  AND address
 		  </if>
          LIKE #{area} || '%'
	 </select>
	 
	 <select id="selectComList"  resultMap="concertReviewResult" >
	    SELECT user_no,
				concert_no,
				review_no,
				review_content,
				score,
				nickname,
				review_date,
				concert_members
		 FROM concert_review
		 JOIN staez_user USING (user_no)
		 JOIN concert USING (concert_no)
		WHERE review_status = 'Y'
		  AND concert_no = #{concertNo}
	    ORDER BY review_no
	 </select>
	 
	<select id="selectRevCount" resultType="_int">
		SELECT COUNT(*)
		FROM board
		JOIN tag USING (board_no)
		JOIN concert USING (concert_no)
		WHERE concert_no = #{concertNo}
		  AND board_status = 'Y'
	</select>
	
	 <select id="selectRevList"  resultMap="boardResult" >
	 	SELECT b.user_no,
				b.board_no,
				su.nickname,
			    c.concert_no,
				b.board_write_date,
				b.board_title,
				b.board_content,
				pi.file_path || COALESCE(pi.change_name, '2024053118061362372.jpg') AS path
		 FROM board b
		 JOIN staez_user su USING (user_no)
		 JOIN profile_img pi USING (user_no)
		 JOIN tag USING (board_no)
		 JOIN concert c USING (concert_no)
		WHERE c.concert_no = #{concertNo}
		  AND board_status = 'Y'
	    ORDER BY board_no
	 </select>
	 
	  <select id="selectSeatPrice"  resultMap="SeatResult" >
		SELECT concert_no, grade, price
		FROM seat
		GROUP BY concert_no, grade, price
		HAVING concert_no = #{concertNo}
		ORDER BY price DESC
	 </select>


	<select id="concertApiCount" resultType="_int">
		SELECT COUNT(*)
		FROM concert
		WHERE theater_no IS NULL
	</select>
	<select id="concertIdCount" resultType="_int">
		SELECT COUNT(*)
		FROM concert
		WHERE concert_plot = #{concertId}
	</select>

	<!-- 콘서트 api insert문  -->
	
	<insert id="concertApiInsert">
	        INSERT INTO concert (
	            concert_title,
	            concert_plot,
	            concert_runtime,
	            concert_members,
	            concert_production,
	            age_limit          
	        ) VALUES (
	            #{concertTitle},
	            #{concertPlot},
	            100,
	            'concert_members',
	            'concert_production',
	            'age_limit'
	        )
	</insert>
	<insert id="concertAttatchmentApiInsert">
	        INSERT INTO concert_attachment (
	            concert_no,
	            origin_name,
	            change_name,
	            file_path  
	        ) VALUES (
	            #{concertNo},
	            'api',
	            #{concertNo},
	            #{filePath}
	        )
	</insert>
	<insert id="concertScheduleApiInsert">
	        INSERT INTO concert_schedule (
	            concert_no,
	           
	            start_date,
	            end_date        
	        ) VALUES (
	            #{concertNo},
	           
	            TO_DATE(#{startDate}, 'YYYY.MM.DD'),
	            TO_DATE(#{endDate}, 'YYYY.MM.DD')
	        )
	</insert>
	
    <delete id="concertApiDelete">
    	DELETE FROM concert
		WHERE theater_no IS NULL
    </delete>
    
    <select id="concertAttachmentApiCount" resultType="_int">
    	SELECT COUNT(*)
    	FROM concert_attachment ca
    	JOIN concert c ON (c.concert_no = ca.concert_no)
    	WHERE concert_plot = #{concertPlot}
    </select>
    
    <select id="concertScheduleApiCount" resultType="_int">
    	SELECT COUNT(*)
    	FROM concert_schedule cs
    	JOIN concert c ON (c.concert_no = cs.concert_no)
    	WHERE concert_plot = #{concertPlot}
    </select>
    
    <select id="selectLastAttachmentValue" resultType="_int">
    	SELECT last_value FROM seq_concert_attachment
    </select>
        
    <select id="selectLastScheduleValue" resultType="_int">
    	SELECT last_value FROM seq_concert_schedule
    </select>
    
    <select id="selectConcertNoByConcertId" resultType="_int">
    	SELECT concert_no
    	FROM concert
    	WHERE concert_plot = #{concertPlot}
    </select>
    
    
    <!-- concertId로 db의 concertNo 가져오기 -->
    <select id="selectConApi" resultMap="concertResult" >
	    SELECT concert_no
	    FROM concert
		WHERE concert_plot = #{concertId}
	</select>
    
    
    <!-- api 좋아요 구현 -->
	<select id="selectConLikeCountApi" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
			WHERE concert_no = #{concertNo}
			  AND status = 'Y'
	</select>
	
	<select id="selectUserConLikeApi" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
           WHERE user_no = #{userNo}
             AND concert_no = #{concertNo}
             AND status = 'Y'
	</select>
	
	<select id="selectUserConLikeAllApi" resultType="_int">
			SELECT COUNT(*)
			FROM concert_like
           WHERE user_no = #{userNo}
             AND concert_no = #{concertNo}
	</select>
	
	
	<insert id="insertConLikeApi">
	        INSERT INTO concert_like (
	            user_no,
	            concert_no																				
	        ) VALUES (
	            #{userNo},
	            #{concertNo}
	        )
	</insert>
	
	<update id="updateConLikeApi">
        UPDATE concert_like
           SET status = #{status}
         WHERE user_no = #{userNo}
           AND concert_no = #{concertNo}
    </update>
    
    <select id="selectConDetailApi" resultMap="concertResult" >
		SELECT *
		FROM concert
		WHERE concert_no = #{concertNo}
	</select>
    
    <select id="selectConcertId" resultMap="concertResult" >
		SELECT concert_plot, concert_no
		FROM concert
		WHERE theater_no IS NULL 
	</select>
	
	<select id="popularListApi" resultMap="concertResult" >
		SELECT c.concert_no,
		       c.concert_title,
			   ca.file_path,
			   cs.start_date,
			   cs.end_date
		FROM concert c
		LEFT JOIN(SELECT concert_no,
				count(DISTINCT concert_like_no) as countLike,
				min(scs.start_date) as start_date,
				max(scs.end_date) as end_date
			FROM concert_like
			JOIN concert_schedule scs USING (concert_no)
			GROUP BY concert_no
			ORDER BY concert_no) sub ON c.concert_no = sub.concert_no
		JOIN concert_attachment ca ON c.concert_no = ca.concert_no
		JOIN concert_schedule cs ON c.concert_no = cs.concert_no
		WHERE c.concert_status = 'Y'
		 AND theater_no IS NULL 
	    ORDER BY sub.countLike desc, sub.countLike is null asc
	</select>
    
    
    
</mapper>