<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace: 해당 mapper파일의 고유한 별칭 -->
<mapper namespace="adminMapper">
	<resultMap type="Board" id="boardResult">
		<result column="board_no" property="boardNo" />
		<result column="ref_board_no" property="refBoardNo" />
		<result column="user_no" property="userNo" />
		<result column="user_Id" property="userId" />
		<result column="nickname" property="nickname" />
		<result column="board_level" property="boardLevel" />
		<result column="board_code" property="boardCode" />
		<result column="board_write_date" property="boardWriteDate" />
		<result column="board_title" property="boardTitle" />
		<result column="board_content" property="boardContent" />
		<result column="board_count" property="boardCount" />
		<result column="board_status" property="boardStatus" />
		<result column="category_no" property="categoryNo" />
		<result column="category_name" property="categoryName" />
		<result column="ref_category_no" property="refCategoryNo" />
		<result column="category_level" property="categoryLevel" />
		<result column="concert_no" property="concertNo" />
		<result column="like_count" property="likeCount" />
		<result column="path" property="path" />
	</resultMap>
	<resultMap type="Category" id="categoryResult">
		<result column="category_no" property="categoryNo"/>
		<result column="ref_category_no" property="refCategoryNo"/>
		<result column="category_name" property="categoryName"/>
		<result column="category_level" property="categoryLevel"/>
	</resultMap>
	<resultMap type="Theater" id="theaterResult">
		<result column="theater_no" property="theaterNo"/>
		<result column="theater_name" property="theaterName"/>
		<result column="theater_row" property="theaterRow"/>
		<result column="theater_col" property="theaterCol"/>
		<result column="address" property="address"/>
		<result column="telno" property="telno"/>
	</resultMap>
	<resultMap type="ImpossibleSeat" id="impossibleSeatResult">
		<result column="impossible_seat_no" property="impossibleSeatNo"/>
		<result column="theater_no" property="theaterNo"/>
		<result column="impossible_seat_row" property="impossibleSeatRow"/>
		<result column="impossible_seat_col" property="impossibleSeatCol"/>
	</resultMap>	
	<resultMap type="Concert" id="concertResult">
	    <result column="concert_no" property="concertNo"/>
	    <result column="theater_no" property="theaterNo"/>
	    <result column="concert_title" property="concertTitle"/>
	    <result column="concert_plot" property="concertPlot"/>
	    <result column="concert_runtime" property="concertRuntime"/>
	    <result column="concert_members" property="concertMembers"/>
	    <result column="concert_production" property="concertProduction"/>
	    <result column="age_limit" property="ageLimit"/>
	    <result column="update_date" property="updateDate"/>
	    <result column="concert_status" property="concertStatus"/>
	    <result column="change_name" property="changeName"/>
	    <result column="origin_name" property="originName"/>
	    <result column="file_path" property="filePath"/>
	    <result column="start_date" property="startDate"/>
	    <result column="end_date" property="endDate"/>
	    <result column="category_no" property="categoryNo"/>
	    <result column="category_name" property="categoryName"/>
	    <result column="theater_name" property="theaterName"/>
	    <result column="path" property="path" />
   </resultMap>
   	<resultMap type="User" id="userResult">
		<result column="user_no" property="userNo" />
		<result column="user_id" property="userId" />
		<result column="user_pwd" property="userPwd" />
		<result column="nickname" property="nickname" />
		<result column="gender" property="gender" />
		<result column="birth" property="birth" />
		<result column="address" property="address" />
		<result column="email" property="email" />
		<result column="phone" property="phone" />
		<result column="genre_like" property="genreLike" />
		<result column="grade" property="grade" />
		<result column="enroll_date" property="enrollDate" />
		<result column="withdrawal_date" property="withdrawalDate" />
		<result column="user_status" property="userStatus" />
	</resultMap>
	<resultMap type="Reserve" id="reserveResult">
		<result column="reserve_no" property="reserveNo" />
		<result column="concert_no" property="concertNo" />
		<result column="concert_title" property="concertTitle" />
		<result column="user_no" property="userNo" />
		<result column="reserve_row" property="reserveRow" />
		<result column="reserve_col	" property="reserveCol" />
		<result column="reserve_date" property="reserveDate" />
		<result column="pay_method" property="payMethod" />
		<result column="concert_date" property="concertDate" />
		<result column="concert_times" property="concertTimes" />
		<result column="reserve_status" property="reserveStatus" />
		<result column="r_name" property="rName" />
		<result column="r_birth" property="rbirth" />
		<result column="r_phone" property="rPhone" />
		<result column="schedule" property="schedule" />
	</resultMap>
	<resultMap type="ConcertSchedule" id="concertScheduleResult">
		<result column="schedule_no" property="scheduleNo" />
		<result column="concert_no" property="concertNo" />
		<result column="schedule" property="schedule" />
		<result column="start_date" property="startDate" />
		<result column="end_date" property="endDate" />
		<result column="concert_times" property="concertTimes" />
		<result column="status" property="status" />
	</resultMap>
	<resultMap type="Seat" id="seatResult">
		<result column="seat_id" property="seatId" />
		<result column="concert_no" property="concertNo" />
		<result column="grade" property="grade" />
		<result column="price" property="price" />
		<result column="concert_date" property="concertDate" />
		<result column="seat_start_row" property="seatStartRow" />
		<result column="seat_end_row" property="seatEndRow" />
		<result column="seat_start_col" property="seatStartCol" />
		<result column="seat_end_col" property="seatEndCol" />
		<result column="status" property="status" />
		<result column="seat_count" property="seatCount" />
	</resultMap>
	<select id="selectFaqCategory" resultMap="categoryResult">
		SELECT
			category_no,
			ref_category_no,
			category_name,
			category_level
		FROM category
		WHERE ref_category_no = #{refCategoryNo}
	</select>
	
	<insert id="faqInsert">
		INSERT INTO board
		(
			user_no,
			board_code,
			board_title,
			board_content
		) VALUES (
			#{userNo},
			#{boardCode},
			#{boardTitle},
			#{boardContent}
		)
	</insert>
	
	<insert id="faqCategoryInsert">
		INSERT INTO board_category
		(
			board_no,
			category_no
		) values (
			CURRVAL('seq_board'::regclass),
			#{categoryNo}
		)
	</insert>
	
	<insert id="insertTheater">
		INSERT INTO theater
		(
			theater_name,
			theater_row,
			theater_col,
			address,
			telno
		) VALUES (
			#{theaterName},
			${theaterRow},
			${theaterCol},
			#{address},
			#{telno}
		)
	</insert>
	
	<insert id="insertImpossibleSeat">
		INSERT INTO impossible_seat
		(
			theater_no,
			impossible_seat_row,
			impossible_seat_col
		) VALUES (
			CURRVAL('seq_theater'::regclass),
			${impossibleSeatRow},
			${impossibleSeatCol}
		)
	</insert>
	
	<select id="selectTheater" resultMap="theaterResult">
		SELECT 
			theater_no,
			theater_name,
			theater_row,
			theater_col,
			address,
			telno
		FROM theater
		WHERE theater_no = #{theaterNo}
	</select>
	
	<select id="selectImpossibleSeat" resultMap="impossibleSeatResult">
		SELECT
			impossible_seat_row,
			impossible_seat_col
		FROM impossible_seat
		WHERE theater_no = #{theaterNo}
	</select>
	
	<update id="updateTheater">
		UPDATE theater
		SET
			theater_name = #{theaterName},
			theater_row = ${theaterRow},
			theater_col = ${theaterCol},
			address = #{address},
			telno = #{telno}
		WHERE theater_no = #{theaterNo}
	</update>
	
	<delete id="deleteImpossibleSeat">
		DELETE FROM impossible_seat
		WHERE theater_no = #{theaterNo}
	</delete>
	
	<insert id="updateImpossibleSeat">
		INSERT INTO impossible_seat
		(
			theater_no,
			impossible_seat_row,
			impossible_seat_col
		) VALUES (
			#{theaterNo},
			${impossibleSeatRow},
			${impossibleSeatCol}
		)
	</insert>
	
	<select id="selectTheaterList" resultMap="theaterResult">
		SELECT
			theater_no,
			theater_name,
			theater_row,
			theater_col
		FROM theater
		WHERE theater_name LIKE '%' || #{keyword} || '%'
		LIMIT 5
	</select>
	
	<delete id="deleteTheater">
		DELETE FROM theater
		WHERE theater_no = #{theaterNo}
	</delete>
	
	<insert id="insertConcert">
		INSERT INTO concert
		( 
			theater_no,
			concert_title,
			concert_plot,
			concert_runtime,
			concert_members,
			concert_production,
			age_limit
		) VALUES (
			#{theaterNo},
			#{concertTitle},
			#{concertPlot},
			#{concertRuntime},
			#{concertMembers},
			#{concertProduction},
			#{ageLimit}
		)
	</insert>
	
	<insert id="insertConcertCategory">
		INSERT INTO concert_category
		(
			concert_no,
			category_no
		) VALUES (
			CURRVAL('seq_concert'::regclass),
			#{categoryNo}
		)
	</insert>
	
	<insert id="insertConcertAttachment">
		INSERT INTO concert_attachment
		(
			concert_no,
			origin_name,
			change_name,
			file_path
		) VALUES (
			CURRVAL('seq_concert'::regclass),
			#{originName},
			#{changeName},
			#{filePath}
		)
	</insert>
	
	<insert id="insertScheduleList">
		INSERT INTO concert_schedule
		(
			concert_no,
			schedule,
			start_date,
			end_date
		) VALUES (
			CURRVAL('seq_concert'::regclass),
			#{schedule},
			#{startDate},
			#{endDate}
		)
	</insert>
	
	<insert id="insertSeatList">
		INSERT INTO seat
		(
			concert_no,
			grade,
			price,
			concert_date,
			seat_start_row,
			seat_end_row,
			seat_start_col,
			seat_end_col
		) VALUES (
			CURRVAL('seq_concert'::regclass),
			#{grade},
			#{price},
			#{concertDate},
			#{seatStartRow},
			#{seatEndRow},
			#{seatStartCol},
			#{seatEndCol}
		)
	</insert>
	
	<update id="deleteConcert">
		UPDATE concert
		SET concert_status = 'N'
		WHERE concert_no = #{concertNo}
	</update>
	
	<select id="selectConcert" resultMap="concertResult">
		SELECT
			c.concert_no,
			c.concert_title,
			cc.category_no,
			ct.category_name,
			c.concert_runtime,
			c.age_limit,
			t.theater_no,
			t.theater_name,
			c.concert_members,
			c.concert_production,
			ca.origin_name,
			ca.file_path || ca.change_name as path,
			c.concert_plot
		FROM concert c
		JOIN concert_category cc ON (c.concert_no = cc.concert_no)
		JOIN category ct ON (cc.category_no = ct.category_no)
		JOIN theater t ON (c.theater_no = t.theater_no)
		JOIN concert_attachment ca ON (c.concert_no = ca.concert_no)
		WHERE c.concert_no = #{concertNo}
	</select>
	
	<select id="selectConcertTheater" resultMap="theaterResult">
	
	</select>
	
	<select id="selectConcertSchedule" resultMap="concertScheduleResult">
		SELECT
			start_date,
			end_date,
			schedule
		FROM concert_schedule
		WHERE concert_no = #{concertNo}
	</select>
	
	<update id="updateConcert">
		UPDATE concert
		SET 
			theater_no = #{theaterNo},
			concert_title = #{concertTitle},
			concert_plot = #{concertPlot},
			concert_runtime = #{concertRuntime},
			concert_members = #{concertMembers},
			concert_production = #{concertProduction},
			age_limit = #{ageLimit}
		WHERE concert_no = #{concertNo}
	</update>
	
	<delete id="deleteConcertCategory">
		DELETE FROM concert_category
		WHERE concert_no = #{concertNo}
	</delete>
	
	<insert id="updateConcertCategory">
		INSERT INTO concert_category
		(
			concert_no,
			category_no
		) VALUES (
			#{concertNo},
			#{categoryNo}
		)
	</insert>
	
	<update id="updateConcertAttachment">
		UPDATE concert_attachment
		SET
			origin_name = #{originName},
			change_name = #{changeName},
			file_path = #{filePath}
		WHERE concert_no = #{concertNo}
	</update>
	
	<insert id="updateScheduleList">
		INSERT INTO concert_schedule
		(
			concert_no,
			schedule,
			start_date,
			end_date
		) VALUES (
			#{concertNo},
			#{schedule},
			#{startDate},
			#{endDate}
		)
	</insert>
	
	<delete id="deleteScheduleList">
		DELETE FROM concert_schedule
		WHERE concert_no = #{concertNo}
	</delete>
	
	<insert id="updateSeatList">
		INSERT INTO seat
		(
			concert_no,
			grade,
			price,
			concert_date,
			seat_start_row,
			seat_end_row,
			seat_start_col,
			seat_end_col
		) VALUES (
			#{concertNo},
			#{grade},
			#{price},
			#{concertDate},
			#{seatStartRow},
			#{seatEndRow},
			#{seatStartCol},
			#{seatEndCol}
		)
	</insert>
		
	<delete id="deleteSeatList">
		DELETE FROM seat
		WHERE concert_no = #{concertNo}
	</delete>
	
	<select id="selectSeat" resultMap="seatResult">
		SELECT
			seat_start_row,
			seat_end_row,
			seat_start_col,
			seat_end_col,
			concert_date,
			grade,
			price
		FROM seat
		WHERE concert_no = #{concertNo}
		AND status = 'Y'
	</select>
	
	<update id="concertAttachmentUpdateStatus">
		UPDATE concert_attachment
		SET
			status = 'N'
		WHERE concert_no = #{concertNo}
	</update>
	
	<insert id="concertAttachmentInsert">
		INSERT INTO concert_attachment
		(
			concert_no,
			origin_name,
			change_name,
			file_path
		) VALUES (
			#{concertNo},
			#{originName},
			#{changeName},
			#{filePath}
		)
	</insert>
	
	<select id="selectNoticeCnt" parameterType="com.spring.staez.admin.model.dto.AdminCategoryDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN board_category bc on (b.board_no = bc.board_no)
		WHERE b.board_status = 'Y'
		AND
	    <choose>
	        <when test='select != null and select == "title"'>
	            b.board_title LIKE '%' || #{keyword} || '%'
	        </when>
	        <otherwise>
	            b.board_content LIKE '%' || #{keyword} || '%'
	        </otherwise>
	    </choose>
		AND b.board_code = 1
		AND bc.category_no = ${categoryNo}
	</select>
	<select id="selectNoticeCntAll" parameterType="com.spring.staez.admin.model.dto.AdminCategoryDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN board_category bc on (b.board_no = bc.board_no)
		WHERE b.board_status = 'Y'
		AND 
	    <choose>
	        <when test='select != null and select == "title"'>
	            b.board_title LIKE '%' || #{keyword} || '%'
	        </when>
	        <otherwise>
	            b.board_content LIKE '%' || #{keyword} || '%'
	        </otherwise>
	    </choose>
		AND b.board_code = 1
	</select>
	<select id="selectNotice" parameterType="com.spring.staez.admin.model.dto.AdminCategoryDto" resultMap="boardResult">
	    SELECT
	        b.board_no,
	        u.user_no,
	        u.nickname,
	        b.board_level,
	        b.board_write_date,
	        b.board_title,
	        b.board_content,
	        b.board_count
	    FROM board b
	    JOIN staez_user u on (b.user_no = u.user_no)
	    JOIN board_category bc on (b.board_no = bc.board_no)
	    WHERE b.board_status = 'Y'
	    AND 
	    <choose>
	        <when test='select != null and select == "title"'>
	            b.board_title LIKE '%' || #{keyword} || '%'
	        </when>
	        <otherwise>
	            b.board_content LIKE '%' || #{keyword} || '%'
	        </otherwise>
	    </choose>
	    AND b.board_code = 1
	    AND bc.category_no = ${categoryNo}
	    ORDER BY b.board_no DESC
	</select>
	<select id="selectNoticeAll" parameterType="com.spring.staez.admin.model.dto.AdminCategoryDto" resultMap="boardResult">
		SELECT
			b.board_no,
			u.user_no,
			u.nickname,
			b.board_level,
			b.board_write_date,
			b.board_title,
			b.board_content,
			b.board_count
		FROM board b
		JOIN staez_user u on (b.user_no = u.user_no)
		JOIN board_category bc on (b.board_no = bc.board_no)
		WHERE b.board_status = 'Y'
		AND
	    <choose>
	        <when test='select != null and select == "title"'>
	            b.board_title LIKE '%' || #{keyword} || '%'
	        </when>
	        <otherwise>
	            b.board_content LIKE '%' || #{keyword} || '%'
	        </otherwise>
	    </choose>
		AND b.board_code = 1
		ORDER BY b.board_no DESC
	</select>
	<select id="selectNoticeCategory" resultMap="categoryResult">
		SELECT
			c.category_no,
			c.category_name
		FROM board_category bc
		JOIN category c ON (bc.category_no = c.category_no)
		WHERE bc.board_no = #{boardNo}
	</select>
	<insert id="insertNotice">
		INSERT INTO board
		(
			user_no,
			board_title,
			board_content,
			board_code
		) VALUES (
			#{userNo},
			#{boardTitle},
			#{boardContent},
			1
		)
	</insert>
	
	<insert id="insertNoticeCategory">
		INSERT INTO board_category
		(
			board_no,
			category_no
		) VALUES (
			CURRVAL('seq_board'::regclass),
			#{categoryNo}
		)
	</insert>
	
	<select id="noticeDetail" resultMap="boardResult">
		SELECT
			b.board_no,
			u.user_no,
			u.nickname,
			b.board_write_date,
			b.board_title,
			b.board_content,
			b.board_count,
			bc.category_no,
			c.category_name
		FROM board b
		JOIN staez_user u on (b.user_no = u.user_no)
		JOIN board_category bc on (b.board_no = bc.board_no)
		JOIN category c on (bc.category_no = c.category_no)
		WHERE b.board_no = ${boardNo}
	</select>
	
	<select id="selectConcertContentList" resultMap="concertResult">
		select c.concert_no,
				cg.category_name,
				c.concert_title,
				min(cs.start_date) start_date,
				max(cs.end_date) end_date,
				t.theater_name
		from concert c
		join concert_category cc on (c.concert_no = cc.concert_no)
		join category cg on (cc.category_no = cg.category_no)
		join concert_schedule cs on (c.concert_no = cs.concert_no)
		join theater t on  (c.theater_no = t.theater_no)
		where c.concert_status = 'Y'
		group by c.concert_no, cg.category_name, c.concert_title, t.theater_name
		order by c.concert_no desc
	</select>
	
	<select id="selectConcertImgList" resultMap="concertResult">
		select c.concert_no, ca.file_path, ca.change_name
		from concert c
		join concert_attachment ca on (c.concert_no = ca.concert_no)
		where c.concert_status = 'Y'
		and ca.status = 'Y'
		order by c.concert_no desc
	</select>
	
	<select id="selectConcertContentListCount" resultType="_int">
		select count(concert_no)
		from concert
		where concert_status = 'Y'
		and theater_no IS NOT NULL;
	</select>
	
	<select id="selectTheaterListCount" resultType="_int">
		select count(theater_no)
		from theater
	</select>
	
	<select id="selectMainTheaterList" resultMap="theaterResult">
		select theater_no,
				theater_name,
				theater_row,
				theater_col,
				address,
				telno
		from theater
		order by theater_no desc
	</select>
	<!-- 관리자의 유저 정보 변경 페이지 -->
	<select id="selectUserCnt" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM staez_user
		WHERE user_status = 'Y'
		AND
		<choose>
			<when test='select == "userId"'>
				user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "nickname"'>
				nickname LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "phone"'>
				phone LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				email LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectUser" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultMap="userResult">
		SELECT
			user_no,
			user_id,
			nickname,
			grade,
			phone,
			email,
			enroll_date
		FROM staez_user
		WHERE user_status = 'Y'
		AND
		<choose>
			<when test='select == "userId"'>
				user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "nickname"'>
				nickname LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "grade"'>
				grade LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "phone"'>
				phone LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				email LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY user_no DESC
	</select>
	<update id="deleterUser">
		UPDATE staez_user
		SET user_status = 'N',
			withdrawal_date= NOW()
		WHERE
			user_no IN (
				<foreach collection="userList" item="item" separator=",">
					#{item}
				</foreach>
			)
	</update>
	<update id="updateGradeUser">
		UPDATE staez_user
		SET grade = #{grade}
		WHERE
			user_no IN (
				<foreach collection="userList" item="item" separator=",">
					#{item}
				</foreach>
			)
	</update>
	<!-- 관리자의 커뮤니티 정보 변경 페이지 -->
	<select id="selectBoardCnt" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 2
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "nickname"'>
				u.nickname LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectBoard" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultMap="boardResult">
		SELECT
			b.board_no,
			u.user_id,
			u.nickname,
			b.board_title,
			b.board_content
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 2
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "nickname"'>
				u.nickname LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY b.board_no DESC
	</select>
	<update id="deleteBoard">
		UPDATE board
		SET board_status = 'N'
		WHERE
			board_no IN (
				<foreach collection="boardList" item="item" separator=",">
					#{item}
				</foreach>
			)
	</update>
	<delete id="deleteBoardCategory">
		DELETE FROM board_category
		WHERE category_no = #{categoryNo} 
		AND board_no = #{boardNo}
	</delete>
	<insert id="insertBoardCategory">
		INSERT INTO board_category
		(
			board_no,
			category_no
		) VALUES (
			#{boardNo},
			#{categoryNo}
		)
	</insert>
	<select id="selectBoardCategory" resultType="_int">
		SELECT 
			c.category_no 
		FROM category c
		JOIN board_category bc USING (category_no)
		WHERE board_no = #{boardNo} 
		AND category_level = #{categoryLevel}
	</select>
	<!-- 관리자의 Faq 정보 변경 페이지 -->
	<select id="selectFaqCnt" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		JOIN board_category bc ON (b.board_no = bc.board_no)
		JOIN category c ON (bc.category_no = c.category_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 4
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "categoryName"'>
				c.category_name LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectFaq" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultMap="boardResult">
		SELECT
			b.board_no,
			u.user_id,
			b.board_title,
			b.board_content,
			c.category_name
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		JOIN board_category bc ON (b.board_no = bc.board_no)
		JOIN category c ON (bc.category_no = c.category_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 4
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "categoryName"'>
				c.category_name LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY b.board_no DESC
	</select>
	<!-- 공용으로 사용 - 게시판을 게시판 번호로 조회 -->
	<select id="selectOneBoard" resultMap="boardResult">
		SELECT 
			b.board_no,
			b.ref_board_no,
			b.board_title,
			bc.category_no,
			b.board_content,
			u.user_id
		FROM board b
		JOIN board_category bc ON (b.board_no = bc.board_no)
		JOIN staez_user u on (b.user_no = u.user_no)
		WHERE b.board_no = #{boardNo}
	</select>
	<update id="updateOneBoard">
		UPDATE board
		SET board_title = #{boardTitle},
			board_content = #{boardContent}
		WHERE board_no = #{boardNo}
	</update>
	<update id="updateOneCategory">
		UPDATE board_category
		SET category_no = #{categoryNo}
		WHERE board_no = #{boardNo}
	</update>
	<insert id="insertOneBoard">
		INSERT INTO board 
		(
			ref_board_no,
			user_no,
			board_level,
			board_code,
			board_title,
			board_content
		) VALUES (
			#{refBoardNo},
			#{userNo},
			#{boardLevel},
			#{boardCode},
			#{boardTitle},
			#{boardContent}
		)
	</insert>
	<select id="selectInquireCnt" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		JOIN board_category bc ON (b.board_no = bc.board_no)
		JOIN category c ON (bc.category_no = c.category_no)
		LEFT JOIN 
			(SELECT
				ref_board_no, 
				board_write_date 
			FROM board 
			WHERE board_code = 3 AND ref_board_no IS NOT NULL) s
		ON (b.board_no = s.ref_board_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 3
		AND b.board_level = 1
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "categoryName"'>
				c.category_name LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectInquire" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultMap="boardResult">
		SELECT
			b.board_no,
			u.user_id,
			b.board_title,
			b.board_content,
			c.category_name,
			s.board_write_date
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		JOIN board_category bc ON (b.board_no = bc.board_no)
		JOIN category c ON (bc.category_no = c.category_no)
		LEFT JOIN 
			(SELECT
				ref_board_no, 
				board_write_date 
			FROM board 
			WHERE board_code = 3 AND ref_board_no IS NOT NULL) s
		ON (b.board_no = s.ref_board_no)
		WHERE b.board_status = 'Y'
		AND b.board_code = 3
		AND b.board_level = 1
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "categoryName"'>
				c.category_name LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY b.board_no DESC
	</select>
		<select id="selectReportCnt" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultType="_int">
		SELECT
			COUNT(*)
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		LEFT JOIN 
			(SELECT
				ref_board_no, 
				board_write_date 
			FROM board 
			WHERE board_code = 5 AND ref_board_no IS NOT NULL) s
		ON (b.board_no = s.ref_board_no)
		WHERE b.board_status = 'Y'
		and b.board_code = 5
		AND b.board_level = 2
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectReport" parameterType="com.spring.staez.admin.model.dto.AdminSearchDto" resultMap="boardResult">
		SELECT
			b.board_no,
			b.ref_board_no,
			u.user_id,
			b.board_title,
			b.board_content,
			s.board_write_date
		FROM board b
		JOIN staez_user u ON (b.user_no = u.user_no)
		LEFT JOIN 
			(SELECT
				ref_board_no, 
				board_write_date 
			FROM board 
			WHERE board_code = 5 AND ref_board_no IS NOT NULL) s
		ON (b.board_no = s.ref_board_no)
		WHERE b.board_status = 'Y'
		and b.board_code = 5
		AND b.board_level = 2
		AND
		<choose>
			<when test='select == "userId"'>
				u.user_id LIKE '%' || #{keyword} || '%'
			</when>
			<when test='select == "title"'>
				b.board_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				b.board_content LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY b.board_no DESC
	</select>
	<select id="selectReserveCnt" resultType="_int">
		SELECT
			COUNT(*)
		FROM reserve r
		JOIN concert c ON (r.concert_no = c.concert_no)
		AND
		<choose>
			<when test='select == "concertTitle"'>
				c.concert_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				r.r_name LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
	</select>
	<select id="selectReserve" resultMap="reserveResult">
		SELECT
			r.reserve_no,
			c.concert_title,
			r.r_name,
			r.reserve_date,
			r.pay_method,
			r.reserve_status,
			r.schedule
		FROM reserve r
		JOIN concert c ON (r.concert_no = c.concert_no)
		AND
		<choose>
			<when test='select == "concertTitle"'>
				c.concert_title LIKE '%' || #{keyword} || '%'
			</when>
			<otherwise>
				r.r_name LIKE '%' || #{keyword} || '%'
			</otherwise>
		</choose>
		ORDER BY r.reserve_no DESC
	</select>
	<update id="updateReserve">
		UPDATE reserve
		SET reserve_status = #{reserveStatus}
		WHERE reserve_no = #{reserveNo}
	</update>
</mapper>

